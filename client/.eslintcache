[{"/Users/fsr/source/trip-ready/client/src/index.js":"1","/Users/fsr/source/trip-ready/client/src/App.js":"2","/Users/fsr/source/trip-ready/client/src/components/Navbar.js":"3","/Users/fsr/source/trip-ready/client/src/components/TripList.js":"4","/Users/fsr/source/trip-ready/client/src/components/Trip.js":"5","/Users/fsr/source/trip-ready/client/src/components/TripForm.js":"6"},{"size":357,"mtime":1626922912349,"results":"7","hashOfConfig":"8"},{"size":652,"mtime":1626928029699,"results":"9","hashOfConfig":"8"},{"size":905,"mtime":1626914544247,"results":"10","hashOfConfig":"8"},{"size":2062,"mtime":1626928074324,"results":"11","hashOfConfig":"8"},{"size":1045,"mtime":1626929654541,"results":"12","hashOfConfig":"8"},{"size":2607,"mtime":1626928090638,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1ubxfll",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},"/Users/fsr/source/trip-ready/client/src/index.js",[],["28","29"],"/Users/fsr/source/trip-ready/client/src/App.js",[],"/Users/fsr/source/trip-ready/client/src/components/Navbar.js",[],"/Users/fsr/source/trip-ready/client/src/components/TripList.js",[],"/Users/fsr/source/trip-ready/client/src/components/Trip.js",[],"/Users/fsr/source/trip-ready/client/src/components/TripForm.js",["30"],"import React, { useState } from 'react';\n\n\nfunction TripForm(props) {\n  const [input, setInput] = useState('');\n  let [eagerness, setEagerness] = useState('');\n\n  const eagernessLevel = ['high', 'medium', 'low']\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (!eagerness) {\n      eagerness = 'low';\n    }\n\n    props.onSubmit({\n      id: Math.random(Math.floor() * 1000),\n      text: input,\n      eagerness: eagerness,\n    });\n\n    setInput('');\n    setEagerness('');\n  };\n\n  const handleChange = (e) => {\n    setInput(e.target.value);\n  };\n\n  // First we check to see if \"edit\" prop exists. If not, we render the normal form\n  // If the prop \"edit\" exists, we know to render the update form instead\n  return !props.edit ? (\n    <div>\n      \n      \n          <form className=\"trip-form\" onSubmit={handleSubmit}>\n            <input\n              type=\"text\"\n              placeholder=\"Name of your trip\"\n              value={input}\n              name=\"text\"\n              className=\"trip-input\"\n              onChange={handleChange}\n            ></input>\n            {/* <div className=\"dropdown\">\n              <button className={`dropbtn ${eagerness}`}>\n                {eagerness || 'Priority'}\n              </button>\n              <div className=\"dropdown-content\">\n                <p onClick={() => setEagerness(eagernessLevel[0])}>Must do</p>\n                <p onClick={() => setEagerness(eagernessLevel[1])}>Want to do</p>\n                <p onClick={() => setEagerness(eagernessLevel[2])}>Take it or leave it</p>\n              </div>\n            </div> */}\n            <button className=\"trip-button\">Create trip</button>\n          </form>\n    \n    </div>\n    \n  ) : (\n    <div>\n      <h3>Update entry: {props.edit.value}</h3>\n      <form className=\"trip-form\" onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          placeholder={props.edit.value}\n          value={input}\n          name=\"text\"\n          className=\"trip-input\"\n          onChange={handleChange}\n        ></input>\n        {/* <div className=\"dropdown\">\n          <button className={`dropbtn ${eagerness}`}>\n            {eagerness || 'Priority'}\n          </button>\n          <div className=\"dropdown-content\">\n            <p onClick={() => setEagerness(eagernessLevel[0])}>Must do</p>\n            <p onClick={() => setEagerness(eagernessLevel[1])}>Want to do</p>\n            <p onClick={() => setEagerness(eagernessLevel[2])}>Take it or leave it</p>\n          </div>\n        </div> */}\n        <button className=\"trip-button\">Update</button>\n      </form>\n    </div>\n  );\n}\n\nexport default TripForm;\n",{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":8,"column":9,"nodeType":"37","messageId":"38","endLine":8,"endColumn":23},"no-native-reassign",["39"],"no-negated-in-lhs",["40"],"no-unused-vars","'eagernessLevel' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]